<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat con Gemini</title>
    <!-- Bulma CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Custom styles -->
    <link rel="stylesheet" href="/css/style.css">
    <style>
        /* Modern Chat Layout */
        .chat-layout {
            height: 100vh;
            overflow: hidden;
            position: relative;
        }
        
        /* Sidebar Styles */
        .sidebar {
            width: 320px;
            background: #ffffff;
            border-right: 1px solid #e5e7eb;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.05);
            z-index: 100;
        }
        
        .sidebar-header {
            padding: 1.5rem 1rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            flex-shrink: 0;
        }
        
        .user-section {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 1rem;
        }
        
        .user-info {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            flex: 1;
            min-width: 0;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 1.1rem;
            flex-shrink: 0;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }
        
        .user-details {
            min-width: 0;
            flex: 1;
        }
        
        .user-name {
            font-weight: 600;
            font-size: 0.9rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            margin: 0;
        }
        
        .user-status {
            font-size: 0.75rem;
            opacity: 0.8;
            margin: 0;
        }
        
        .user-menu {
            flex-shrink: 0;
        }
        
        .new-chat-btn {
            background: rgba(255, 255, 255, 0.15);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white;
            transition: all 0.2s ease;
        }
        
        .new-chat-btn:hover {
            background: rgba(255, 255, 255, 0.25);
            color: white;
            transform: translateY(-1px);
        }
        
        /* Chat List */
        .sidebar-content {
            flex: 1;
            overflow-y: auto;
            padding: 0.5rem 0;
        }
        
        .chat-item {
            padding: 1rem;
            margin: 0 0.5rem 0.25rem;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
            border: 1px solid transparent;
        }
        
        .chat-item:hover {
            background-color: #f8fafc;
            border-color: #e2e8f0;
            transform: translateY(-1px);
        }
        
        .chat-item.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }
        
        .chat-item-title {
            font-weight: 600;
            font-size: 0.9rem;
            margin-bottom: 0.25rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            line-height: 1.3;
        }
        
        .chat-item-preview {
            font-size: 0.8rem;
            opacity: 0.7;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            line-height: 1.2;
        }
        
        .chat-item-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 0.5rem;
            font-size: 0.7rem;
            opacity: 0.6;
        }
        
        .chat-item-actions {
            opacity: 0;
            position: absolute;
            right: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            transition: opacity 0.2s ease;
        }
        
        .chat-item:hover .chat-item-actions {
            opacity: 1;
        }
        
        .chat-item.active .chat-item-actions {
            opacity: 0.8;
        }
        
        .delete-btn {
            background: rgba(239, 68, 68, 0.1);
            border: none;
            color: #ef4444;
            width: 28px;
            height: 28px;
            border-radius: 6px;
            transition: all 0.2s ease;
        }
        
        .delete-btn:hover {
            background: #ef4444;
            color: white;
        }
        
        .chat-item.active .delete-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
        }
        
        .chat-item.active .delete-btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }
        
        /* Empty State */
        .empty-state {
            padding: 2rem 1rem;
            text-align: center;
            color: #6b7280;
        }
        
        .empty-state i {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }
        
        /* Main Content */
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            min-width: 0;
        }
        
        /* Mobile Responsive */
        @media (max-width: 1024px) {
            .sidebar {
                width: 280px;
            }
        }
        
        @media (max-width: 768px) {
            .sidebar {
                position: fixed;
                top: 0;
                left: -320px;
                height: 100vh;
                z-index: 1000;
                transition: left 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                width: 320px;
                max-width: 85vw;
            }
            
            .sidebar.is-active {
                left: 0;
            }
            
            .mobile-overlay {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0, 0, 0, 0.5);
                z-index: 999;
                opacity: 0;
                visibility: hidden;
                transition: all 0.3s ease;
            }
            
            .mobile-overlay.is-active {
                opacity: 1;
                visibility: visible;
            }
            
            .user-info {
                gap: 0.5rem;
            }
            
            .user-avatar {
                width: 36px;
                height: 36px;
                font-size: 1rem;
            }
            
            .sidebar-header {
                padding: 1rem;
            }
        }
        
        @media (max-width: 480px) {
            .sidebar {
                width: 100vw;
                max-width: 100vw;
                left: -100vw;
            }
            
            .user-name {
                font-size: 0.85rem;
            }
            
            .chat-item {
                margin: 0 0.25rem 0.25rem;
                padding: 0.875rem;
            }
        }
        
        /* Custom Scrollbar for Sidebar */
        .sidebar-content::-webkit-scrollbar {
            width: 4px;
        }
        
        .sidebar-content::-webkit-scrollbar-track {
            background: transparent;
        }
        
        .sidebar-content::-webkit-scrollbar-thumb {
            background: #d1d5db;
            border-radius: 2px;
        }
        
        .sidebar-content::-webkit-scrollbar-thumb:hover {
            background: #9ca3af;
        }
        
        /* Image Modal Styles */
        .image-modal-container {
            position: relative;
            display: inline-block;
        }
        
        .image-modal-img {
            max-width: 90vw;
            max-height: 90vh;
            border-radius: 8px;
            transition: transform 0.3s ease;
        }
        
        .image-modal-img.zoomed {
            transform: scale(1.5);
            cursor: zoom-out;
        }
        
        .image-modal-actions {
            position: absolute;
            top: 16px;
            right: 16px;
            display: flex;
            gap: 8px;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .image-modal-container:hover .image-modal-actions {
            opacity: 1;
        }
        
        .image-modal-actions .button {
            width: 40px;
            height: 40px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        }
        
        /* Mobile Close Button */
        .mobile-close-btn {
            position: absolute;
            top: 1rem;
            right: 1rem;
            width: 32px;
            height: 32px;
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            cursor: pointer;
            transition: all 0.2s ease;
            z-index: 10;
        }
        
        .mobile-close-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.1);
        }
        
        /* User Menu Button */
        .user-menu-btn {
            background: rgba(255, 255, 255, 0.15) !important;
            border: 1px solid rgba(255, 255, 255, 0.3) !important;
            color: white !important;
        }
        
        .user-menu-btn:hover {
            background: rgba(255, 255, 255, 0.25) !important;
        }
        
        /* Dropdown positioning fix */
        .dropdown.is-right .dropdown-menu {
            left: auto;
            right: 0;
        }
        
        /* Mobile specific adjustments */
        @media (max-width: 768px) {
            .sidebar-header {
                position: relative;
                padding-top: 3rem;
            }
            
            .user-section {
                margin-bottom: 0.75rem;
            }
            
            .dropdown-menu {
                min-width: 150px;
                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
            }
            
            .dropdown-item {
                padding: 0.75rem 1rem;
                font-size: 0.9rem;
            }
        }
        
        @media (max-width: 480px) {
            .mobile-close-btn {
                top: 0.75rem;
                right: 0.75rem;
                width: 28px;
                height: 28px;
            }
            
            .sidebar-header {
                padding: 1rem 0.75rem;
                padding-top: 2.5rem;
            }
        }
        
        /* Header mobile improvements */
        .mobile-menu-btn {
            border-radius: 6px !important;
            padding: 0.5rem !important;
        }
        
        .chat-title-mobile {
            font-size: 1.1rem !important;
        }
        
        @media (max-width: 768px) {
            .chat-header {
                padding: 0.75rem 1rem !important;
                flex-wrap: nowrap;
            }
            
            .header-left {
                flex: 1;
                min-width: 0;
            }
            
            .header-right {
                flex-shrink: 0;
                margin-left: 0.5rem;
            }
            
            .model-select select {
                font-size: 0.8rem;
                padding: 0.25rem 0.5rem;
            }
        }
        
        @media (max-width: 480px) {
            .chat-header {
                padding: 0.5rem 0.75rem !important;
            }
            
            .chat-title-mobile {
                font-size: 1rem !important;
            }
            
            .mobile-menu-btn {
                padding: 0.375rem !important;
                margin-right: 0.5rem !important;
            }
            
            .model-select {
                transform: scale(0.9);
                transform-origin: right center;
            }
        }
    </style>
</head>
<body>
    <div class="chat-layout is-flex">
        <!-- Mobile Overlay -->
        <div class="mobile-overlay" id="mobile-overlay" onclick="toggleSidebar()"></div>
        
        <!-- Sidebar -->
        <div class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <!-- Mobile close button -->
                <div class="mobile-close-btn is-hidden-desktop" onclick="toggleSidebar()">
                    <i class="fas fa-times"></i>
                </div>
                
                <div class="user-section">
                    <div class="user-info">
                        <div class="user-avatar">
                            U
                        </div>
                        <div class="user-details">
                            <div class="user-name">Usuario</div>
                            <div class="user-status">En línea</div>
                        </div>
                    </div>
                    <div class="user-menu">
                        <div class="dropdown is-right">
                            <div class="dropdown-trigger">
                                <button class="button is-small user-menu-btn" onclick="toggleUserMenu(event)">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                            </div>
                            <div class="dropdown-menu" id="user-dropdown">
                                <div class="dropdown-content">
                                    <a href="#" class="dropdown-item" onclick="handleLogout(event)">
                                        <i class="fas fa-sign-out-alt mr-2"></i>
                                        Cerrar Sesión
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <button class="button new-chat-btn is-fullwidth" onclick="createNewChat()">
                    <i class="fas fa-plus mr-2"></i>
                    Nuevo Chat
                </button>
            </div>
            
            <div class="sidebar-content">
                <div id="chat-sessions-list">
                    <!-- Chat sessions will be loaded here -->
                </div>
            </div>
        </div>
        
        <!-- Main Chat Area -->
        <div class="main-content">
            <!-- Fixed Header -->
            <header class="chat-header has-background-primary has-text-white p-4 is-flex is-justify-content-space-between is-align-items-center">
                <div class="is-flex is-align-items-center header-left">
                    <button class="button is-white is-outlined is-small mr-3 is-hidden-desktop mobile-menu-btn" onclick="toggleSidebar()">
                        <i class="fas fa-bars"></i>
                    </button>
                    <i class="fas fa-robot mr-3 is-hidden-mobile"></i>
                    <h1 class="title is-4 has-text-white mb-0 chat-title-mobile" id="chat-title">Chat con Gemini</h1>
                </div>
                <div class="is-flex is-align-items-center header-right">
                    <div class="select is-small is-rounded model-select">
                        <select id="model" name="model">
                            <option value="gemini-1.5-flash" selected>Gemini 1.5 Flash</option>
                            <option value="gemini-pro">Gemini Pro</option>
                            <option value="imagen-2.0">Imagen 2.0</option>
                            <option value="gemini-2.5-flash-image-preview">Gemini 2.5 Flash</option>
                        </select>
                    </div>
                </div>
            </header>

            <!-- Scrollable Chat Area -->
            <main class="chat-container is-flex-grow-1 has-background-white-ter">
                <div id="chat-window" class="chat-messages p-4">
                    <div class="has-text-centered has-text-grey mt-6">
                        <i class="fas fa-robot fa-3x mb-3"></i>
                        <p class="is-size-5">¡Hola! Soy tu asistente de IA.</p>
                        <p class="is-size-6">Selecciona un chat existente o crea uno nuevo para comenzar.</p>
                    </div>
                </div>
            </main>

            <!-- Fixed Input Area -->
            <footer class="chat-input-area has-background-white p-4 box-shadow-top">
                <form id="chat-form" class="is-flex is-align-items-end">
                    <div class="file-input-container mr-2">
                        <div class="field is-grouped">
                            <div class="control">
                                <button type="button" id="btn-upload-image" class="button is-info is-light is-rounded">
                                    <span class="icon">
                                        <i class="fas fa-image"></i>
                                    </span>
                                </button>
                            </div>
                            <div class="control">
                                <button type="button" id="btn-upload-doc" class="button is-info is-light is-rounded">
                                    <span class="icon">
                                        <i class="fas fa-file-alt"></i>
                                    </span>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="is-flex-grow-1">
                        <textarea 
                            id="message" 
                            name="message" 
                            class="textarea is-rounded" 
                            placeholder="Escribe tu mensaje..." 
                            rows="1"
                            style="min-height: 48px; max-height: 120px; resize: none;"
                            disabled></textarea>
                    </div>
                    
                    <div class="ml-2">
                        <button id="btn-send" type="submit" class="button is-primary is-rounded" disabled>
                            <span class="icon">
                                <i class="fas fa-paper-plane"></i>
                            </span>
                        </button>
                    </div>
                </form>
                
                <div id="file-preview" class="file-preview mt-2 is-size-7 has-text-grey"></div>
                <input type="file" id="file" name="file" accept="image/*,.pdf,.txt,.doc,.docx" multiple style="display: none;">
            </footer>
        </div>
    </div>

    <!-- Image Modal -->
    <div id="image-modal" class="modal">
        <div class="modal-background"></div>
        <div class="modal-content">
            <div class="image-modal-container">
                <img id="image-modal-img" class="image-modal-img" src="" alt="Imagen generada">
                <div class="image-modal-actions">
                    <button class="button is-white is-rounded" id="zoom-btn" title="Zoom">
                        <i class="fas fa-search-plus"></i>
                    </button>
                    <button class="button is-white is-rounded" id="download-modal-btn" title="Descargar">
                        <i class="fas fa-download"></i>
                    </button>
                </div>
            </div>
        </div>
        <button class="modal-close is-large" aria-label="close"></button>
    </div>

    <!-- Supabase JS -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <script>
        // Initialize Supabase client
        const supabaseUrl = '<%= supabaseUrl %>';
        const supabaseKey = '<%= supabaseKey %>';
        const { createClient } = supabase;
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Global variables
        let currentSessionId = null;
        let authToken = null;
        
        // Make authToken and currentSessionId available globally for main.js
        window.authToken = null;
        window.currentSessionId = null;
        
        // Get auth token on page load
        async function initializeAuth() {
            try {
                const { data: { session }, error } = await supabaseClient.auth.getSession();
                
                if (error) {
                    console.error('Error getting session:', error);
                    window.location.href = '/auth/login';
                    return;
                }
                
                if (session && session.user) {
                    authToken = session.access_token;
                    window.authToken = session.access_token; // Make available globally
                    // Update user info in sidebar
                    const userAvatar = document.querySelector('.user-avatar');
                    const userName = document.querySelector('.user-name');
                    if (userAvatar && session.user.email) {
                        userAvatar.textContent = session.user.email.charAt(0).toUpperCase();
                    }
                    if (userName && session.user.email) {
                        // Show just the username part before @ if it's an email
                        const displayName = session.user.email.includes('@') 
                            ? session.user.email.split('@')[0] 
                            : session.user.email;
                        userName.textContent = displayName;
                    }
                    loadChatSessions();
                } else {
                    window.location.href = '/auth/login';
                }
            } catch (error) {
                console.error('Error initializing auth:', error);
                window.location.href = '/auth/login';
            }
        }
        
        // Initialize auth when page loads
        initializeAuth();
        
        // Listen for auth state changes
        supabaseClient.auth.onAuthStateChange((event, session) => {
            if (event === 'SIGNED_OUT' || !session) {
                window.location.href = '/auth/login';
            } else if (event === 'SIGNED_IN' && session) {
                authToken = session.access_token;
                window.authToken = session.access_token; // Make available globally
                loadChatSessions();
            }
        });
        
        // Sidebar functions
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('mobile-overlay');
            sidebar.classList.toggle('is-active');
            overlay.classList.toggle('is-active');
            
            // Close user menu if open
            const userDropdown = document.getElementById('user-dropdown');
            if (userDropdown) {
                userDropdown.parentElement.classList.remove('is-active');
            }
        }
        
        // User menu toggle function
        function toggleUserMenu(event) {
            event.stopPropagation();
            const dropdown = document.getElementById('user-dropdown').parentElement;
            dropdown.classList.toggle('is-active');
        }
        
        // Close dropdown when clicking outside
        document.addEventListener('click', function(event) {
            const dropdown = document.getElementById('user-dropdown')?.parentElement;
            if (dropdown && !dropdown.contains(event.target)) {
                dropdown.classList.remove('is-active');
            }
        });
        
        // Handle logout functionality
        async function handleLogout(event) {
            event.preventDefault();
            event.stopPropagation();
            
            try {
                // Show loading state
                const logoutBtn = event.target.closest('.dropdown-item');
                const originalText = logoutBtn.innerHTML;
                logoutBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Cerrando sesión...';
                logoutBtn.style.pointerEvents = 'none';
                
                // Sign out from Supabase
                const { error } = await supabaseClient.auth.signOut();
                
                if (error) {
                    console.error('Error signing out:', error);
                    // Restore button state
                    logoutBtn.innerHTML = originalText;
                    logoutBtn.style.pointerEvents = 'auto';
                    alert('Error al cerrar sesión. Por favor, intenta de nuevo.');
                    return;
                }
                
                // Clear local state
                authToken = null;
                currentSessionId = null;
                window.authToken = null;
                window.currentSessionId = null;
                
                // Clear any stored data
                localStorage.clear();
                sessionStorage.clear();
                
                // Redirect to login
                window.location.href = '/auth/login';
                
            } catch (error) {
                console.error('Unexpected error during logout:', error);
                alert('Error inesperado al cerrar sesión. Redirigiendo...');
                window.location.href = '/auth/login';
            }
        }
        
        // Load chat sessions
        async function loadChatSessions() {
            try {
                const response = await fetch('/api/sessions', {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                if (!response.ok) throw new Error('Error loading sessions');
                
                const { sessions } = await response.json();
                displayChatSessions(sessions);
                
            } catch (error) {
                console.error('Error loading chat sessions:', error);
            }
        }
        
        // Display chat sessions in sidebar
        function displayChatSessions(sessions) {
            const container = document.getElementById('chat-sessions-list');
            
            if (!sessions || sessions.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-comments"></i>
                        <p class="has-text-weight-semibold">No hay conversaciones</p>
                        <p class="is-size-7">Crea tu primer chat para comenzar</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = sessions.map(session => {
                const createdDate = new Date(session.created_at);
                const now = new Date();
                const diffTime = Math.abs(now - createdDate);
                const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
                
                let timeText = '';
                if (diffDays === 0) {
                    timeText = 'Hoy';
                } else if (diffDays === 1) {
                    timeText = 'Ayer';
                } else if (diffDays < 7) {
                    timeText = `${diffDays}d`;
                } else {
                    timeText = createdDate.toLocaleDateString('es-ES', { month: 'short', day: 'numeric' });
                }
                
                return `
                    <div class="chat-item" onclick="loadChatSession('${session.id}')" data-session-id="${session.id}">
                        <div class="chat-item-title">${session.title}</div>
                        <div class="chat-item-preview">${session.last_message_preview || 'Sin mensajes aún...'}</div>
                        <div class="chat-item-meta">
                            <span>${timeText}</span>
                        </div>
                        <div class="chat-item-actions">
                            <button class="delete-btn" onclick="event.stopPropagation(); deleteChat('${session.id}')" title="Eliminar chat">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                `;
            }).join('');
        }
        
        // Create new chat
        async function createNewChat() {
            try {
                const response = await fetch('/api/sessions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${authToken}`
                    },
                    body: JSON.stringify({
                        title: 'Nueva conversación',
                        model: 'gemini-1.5-flash'
                    })
                });
                
                if (!response.ok) throw new Error('Error creating chat');
                
                const { sessionId } = await response.json();
                await loadChatSessions();
                loadChatSession(sessionId);
                
            } catch (error) {
                console.error('Error creating new chat:', error);
            }
        }
        
        // Load specific chat session
        async function loadChatSession(sessionId) {
            try {
                currentSessionId = sessionId;
                window.currentSessionId = sessionId; // Make available globally
                
                // Update active chat in sidebar
                document.querySelectorAll('.chat-item').forEach(item => {
                    item.classList.remove('active');
                });
                document.querySelector(`[data-session-id="${sessionId}"]`)?.classList.add('active');
                
                // Enable chat input
                document.getElementById('message').disabled = false;
                document.getElementById('btn-send').disabled = false;
                
                // Load chat history
                const response = await fetch(`/api/sessions/${sessionId}/history`, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                if (!response.ok) throw new Error('Error loading chat history');
                
                const { messages } = await response.json();
                displayChatHistory(messages);
                
                // Close sidebar on mobile after selecting a chat
                if (window.innerWidth <= 768) {
                    setTimeout(() => {
                        toggleSidebar();
                    }, 300); // Small delay for better UX
                }
                
            } catch (error) {
                console.error('Error loading chat session:', error);
            }
        }
        
        // Display chat history
        function displayChatHistory(messages) {
            const chatWindow = document.getElementById('chat-window');
            chatWindow.innerHTML = '';
            
            if (!messages || messages.length === 0) {
                chatWindow.innerHTML = `
                    <div class="has-text-centered has-text-grey mt-6">
                        <i class="fas fa-robot fa-3x mb-3"></i>
                        <p class="is-size-5">¡Hola! Soy tu asistente de IA.</p>
                        <p class="is-size-6">Escribe un mensaje para comenzar la conversación.</p>
                    </div>
                `;
                return;
            }
            
            messages.forEach(message => {
                const messageData = {
                    sender: message.role,
                    text: message.content,
                    isDirectResponse: false // Indica que es carga de historial
                };
                
                // Handle images from storage - usar URL de storage para historial
                if (message.file_path && message.message_type === 'image') {
                    // Crear imagen de forma asíncrona
                    getImageUrl(message.file_path).then(imageUrl => {
                        if (imageUrl) {
                            messageData.image = imageUrl;
                            // Re-crear el elemento con la imagen
                            createMessageElement(messageData);
                        }
                    }).catch(error => {
                        console.error('Error getting image URL:', error);
                    });
                    return; // Skip creating element now, will be created in promise
                }
                
                // Handle file attachments
                if (message.file_path && message.message_type === 'file') {
                    messageData.file = {
                        name: message.file_name,
                        path: message.file_path
                    };
                }
                
                createMessageElement(messageData);
            });
            
            scrollToBottom();
        }
        
        // Create message element (local version of appendMessage)
        function createMessageElement(data) {
            const { sender, text, file, image, usage } = data;
            const isUser = sender === 'user';
            const chatWindow = document.getElementById('chat-window');

            const messageElement = document.createElement('div');
            messageElement.classList.add('chat-message', isUser ? 'is-user' : 'is-model');

            const bubble = document.createElement('div');
            bubble.classList.add('bubble', 'box', 'p-3');
            if (isUser) {
                bubble.classList.add('has-background-primary', 'has-text-white');
            } else {
                bubble.classList.add('has-background-light');
            }

            if (text) {
                const textElement = document.createElement('p');
                textElement.innerText = text;
                bubble.appendChild(textElement);
            }

            if (file) {
                const fileElement = document.createElement('p');
                fileElement.classList.add('file-info', 'mt-2');
                fileElement.innerText = `Archivo adjunto: ${file.name}`;
                bubble.appendChild(fileElement);
            }

            if (image) {
                const figure = document.createElement('figure');
                figure.classList.add('image');
                const imageElement = document.createElement('img');
                imageElement.src = image;
                imageElement.alt = 'Imagen';
                imageElement.style.maxWidth = '256px';
                imageElement.style.cursor = 'pointer';
                imageElement.onclick = () => {
                    const modal = document.getElementById('image-modal');
                    const modalImg = document.getElementById('image-modal-img');
                    modalImg.src = image;
                    modal.classList.add('is-active');
                };
                figure.appendChild(imageElement);
                bubble.appendChild(figure);
            }

            if (usage && !isUser) {
                const usageElement = document.createElement('p');
                usageElement.classList.add('usage-info', 'mt-2', 'is-size-7', 'has-text-grey');
                usageElement.innerText = `Tokens: ${usage.promptTokenCount || 0} + ${usage.candidatesTokenCount || 0} = ${usage.totalTokenCount || 0}`;
                bubble.appendChild(usageElement);
            }

            messageElement.appendChild(bubble);
            chatWindow.appendChild(messageElement);
        }
        
        // Scroll to bottom function
        function scrollToBottom() {
            const chatWindow = document.getElementById('chat-window');
            chatWindow.scrollTop = chatWindow.scrollHeight;
        }
        
        // Get image URL from storage path - try signed URL first, fallback to public
        async function getImageUrl(filePath) {
            try {
                // Primero intentar con signed URL
                const { data, error } = await supabaseClient.storage
                    .from('custom-gemini-chat-storage')
                    .createSignedUrl(filePath, 3600);
                
                if (!error && data?.signedUrl) {
                    return data.signedUrl;
                }
                
                // Si falla, intentar con URL pública
                const { data: publicData } = supabaseClient.storage
                    .from('custom-gemini-chat-storage')
                    .getPublicUrl(filePath);
                
                return publicData.publicUrl;
            } catch (error) {
                console.error('Error getting image URL:', error);
                return null;
            }
        }
        
        // Delete chat
        async function deleteChat(sessionId) {
            if (!confirm('¿Estás seguro de que quieres eliminar este chat?')) return;
            
            try {
                const response = await fetch(`/api/sessions/${sessionId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                if (!response.ok) throw new Error('Error deleting chat');
                
                if (currentSessionId === sessionId) {
                    currentSessionId = null;
                    document.getElementById('chat-window').innerHTML = `
                        <div class="has-text-centered has-text-grey mt-6">
                            <i class="fas fa-robot fa-3x mb-3"></i>
                            <p class="is-size-5">¡Hola! Soy tu asistente de IA.</p>
                            <p class="is-size-6">Selecciona un chat existente o crea uno nuevo para comenzar.</p>
                        </div>
                    `;
                    document.getElementById('message').disabled = true;
                    document.getElementById('btn-send').disabled = true;
                }
                
                loadChatSessions();
                
            } catch (error) {
                console.error('Error deleting chat:', error);
            }
        }
        
        // Modal functionality for image zoom and download
        document.addEventListener('DOMContentLoaded', function() {
            const modal = document.getElementById('image-modal');
            const modalImg = document.getElementById('image-modal-img');
            const zoomBtn = document.getElementById('zoom-btn');
            const downloadBtn = document.getElementById('download-modal-btn');
            const modalClose = modal.querySelector('.modal-close');
            const modalBackground = modal.querySelector('.modal-background');
            
            let currentImageSrc = '';
            let isZoomed = false;
            
            // Close modal handlers
            [modalClose, modalBackground].forEach(element => {
                element.addEventListener('click', () => {
                    modal.classList.remove('is-active');
                    modalImg.classList.remove('zoomed');
                    isZoomed = false;
                });
            });
            
            // Zoom functionality
            zoomBtn.addEventListener('click', () => {
                isZoomed = !isZoomed;
                modalImg.classList.toggle('zoomed', isZoomed);
                zoomBtn.innerHTML = isZoomed 
                    ? '<i class="fas fa-search-minus"></i>' 
                    : '<i class="fas fa-search-plus"></i>';
            });
            
            // Download functionality
            downloadBtn.addEventListener('click', () => {
                if (currentImageSrc) {
                    window.downloadImage(currentImageSrc, 'imagen-generada.png');
                }
            });
            
            // Override showImageModal to store current image
            const originalShowImageModal = window.showImageModal;
            window.showImageModal = function(imageSrc) {
                currentImageSrc = imageSrc;
                modalImg.classList.remove('zoomed');
                isZoomed = false;
                zoomBtn.innerHTML = '<i class="fas fa-search-plus"></i>';
                if (originalShowImageModal) {
                    originalShowImageModal(imageSrc);
                } else {
                    modalImg.src = imageSrc;
                    modal.classList.add('is-active');
                }
            };
        });
    </script>
    <script src="/js/main.js"></script>
</body>
</html>
